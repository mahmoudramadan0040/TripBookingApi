openapi: 3.0.0
info:
  title: Trip Booking Api Documentation
  version: 1.0.0
  description: Trip Api Document

servers:
  - url: http://localhost:3000
paths:
  /api/auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Successful login
        401:
          description: Unauthorized

  /api/auth/register:
    post:
      summary: Register a new user
      description: Register a user with email and password, sends verification code via email.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: strongPassword123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered. Check your email to verify your account.
        '400':
          description: Email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email already exists
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal Server Error

  /api/transport:
    post:
      summary: Create a new transportation entry
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Transportation'
            encoding:
              included:
                style: form
                explode: true
              excluded:
                style: form
                explode: true
              highlight:
                style: form
                explode: true
              cloudImages:
                style: form
                explode: true
              localImages:
                style: form
                explode: true
      responses:
        '201':
          description: Created successfully
        '400':
          description: Bad request
  /api/transport/{id}:
    get:
      summary: Get a transportation record by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transportation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transportation'
        '404':
          description: Transportation not found
        '500':
          description: Server error

    put:
      summary: Update a transportation record
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransportationInput'
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transportation'
        '404':
          description: Not found
        '500':
          description: Server error

    delete:
      summary: Delete a transportation record
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted successfully
        '404':
          description: Not found
        '500':
          description: Server error

components:
  schemas:
    Transportation:
      type: object
      properties:
        title:
          type: string
          example: 'Tour Bus'
        price:
          type: string
          example: '199.99'
        Duration:
          type: integer
          example: 3
        included:
          type: array
          items:
            type: string
          example: ['Hotel pickup', 'Lunch', 'Guide']
        excluded:
          type: array
          items:
            type: string
          example: ['Drinks', 'Personal expenses']
        highlight:
          type: array
          items:
            type: string
          example: ['Scenic route', 'Photography spots']
        cloudImages:
          type: array
          items:
            type: string
            format: binary
          example:
            - 'https://res.cloudinary.com/.../image1.jpg'
            - 'https://res.cloudinary.com/.../image2.jpg'
        localImages:
          type: array
          items:
            type: string
            format: binary
          example:
            - '/uploads/image1.jpg'
            - '/uploads/image2.jpg'
        IsDeleted:
          type: boolean
          default: false
      required:
        - title
