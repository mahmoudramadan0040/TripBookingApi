openapi: 3.0.0
info:
  title: Trip Booking Api Documentation
  version: 1.0.0
  description: Trip Api Document

servers:
  - url: http://localhost:5000
paths:
  /api/auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Successful login
        401:
          description: Unauthorized

  /api/auth/register:
    post:
      summary: Register a new user
      description: Register a user with email and password, sends verification code via email.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
              properties:
                username:
                  type: string
                  format: string
                  example: mahmoud0020
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: strongPassword123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered. Check your email to verify your account.
        '400':
          description: Email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email already exists
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal Server Error

  /api/transport:
      post:
        summary: Create a new transportation entry
        requestBody:
          required: true
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Transportation'
              encoding:          
                included:
                  style: form
                  explode: true
                excluded:
                  style: form
                  explode: true
                highlight:
                  style: form
                  explode: true
                cloudImages:
                  style: form
                  explode: true
                localImages:
                  style: form
                  explode: true
        responses:
          '201':
            description: Created successfully
          '400':
            description: Bad request
  /api/transport/{id}:
    get:
      summary: Get a transportation record by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transportation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transportation'
        '404':
          description: Transportation not found
        '500':
          description: Server error

    put:
      summary: Update a transportation record
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransportationInput'
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transportation'
        '404':
          description: Not found
        '500':
          description: Server error

    delete:
      summary: Delete a transportation record
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted successfully
        '404':
          description: Not found
        '500':
          description: Server error
  

    /tours:
    post:
      summary: Create a new tour
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                Duration:
                  type: string
                Description:
                  type: string
                included:
                  type: array
                  items:
                    type: string
                excluded:
                  type: array
                  items:
                    type: string
                highlight:
                  type: array
                  items:
                    type: string
                price:
                  type: integer
                locations:
                  type: array
                  items:
                    type: string
                cloudImages:
                  type: array
                  items:
                    type: string
                    format: binary
                localImages:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Tour created successfully

    get:
      summary: Get all tours
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        '200':
          description: List of all tours

  /api/tours:
    get:
      summary: Get a all Tour 
      responses:
        '200':
          description: Tours found
        '404':
          description: Tours not found
  /api/tours/tour:
    post:
        summary: Create a new tour entry
        requestBody:
          required: true
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Tour'
              encoding:          
                included:
                  style: form
                  explode: true
                excluded:
                  style: form
                  explode: true
                highlight:
                  style: form
                  explode: true
                cloudImages:
                  style: form
                  explode: true
                localImages:
                  style: form
                  explode: true
                locations:
                  style: form
                  explode: true
        responses:
          '201':
            description: Created successfully
          '400':
            description: Bad request
        
  /api/tours/search:
    get:
      summary: Search for tours
      parameters:
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: location
          schema:
            type: string
        - in: query
          name: minPrice
          schema:
            type: integer
        - in: query
          name: maxPrice
          schema:
            type: integer
      responses:
        '200':
          description: List of matching tours

  /api/tours/tour/{id}:
    get:
      summary: Get a tour by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tour found
        '404':
          description: Tour not found

    patch:
      summary: Update a tour by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TourUpdate'
      responses:
        '200':
          description: Tour updated

    delete:
      summary: Hard delete a tour by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tour deleted

  /api/tours/tour/{id}/soft-delete:
    patch:
      summary: Soft delete a tour by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tour soft deleted
 
components:
  schemas:
    Transportation:
      type: object
      properties:
        title:
          type: string
          example: "Tour Bus"
        price:
          type: string
          example: "199.99"
        Duration:
          type: integer
          example: 3
        included:
          type: array
          items:
            type: string
          example: ["Hotel pickup", "Lunch", "Guide"]
        excluded:
          type: array
          items:
            type: string
          example: ["Drinks", "Personal expenses"]
        highlight:
          type: array
          items:
            type: string
          example: ["Scenic route", "Photography spots"]
        cloudImages:
          type: array
          items:
            type: string
            format: binary
          example:
            - "https://res.cloudinary.com/.../image1.jpg"
            - "https://res.cloudinary.com/.../image2.jpg"
        localImages:
          type: array
          items:
            type: string
            format: binary
          example:
            - "/uploads/image1.jpg"
            - "/uploads/image2.jpg"
        IsDeleted:
          type: boolean
          default: false
      required:
        - title
    Tour:
        type: object
        properties:
          title:
            type: string
            example: "Giza pyramids and Sphinx. “With camel ride”"
          price:
            type: number
            format: double 
            example: 199.99
          Description:
            type: string
            example: "Explore the Pyramids of Giza and the Great Sphinx on a half-day tour of Cairo with hotel transfers. Enjoy a short camel ride near the pyramids, immersing yourself in the spirit of ancient Egypt."
          FullDescription:
            type: string
            example: "Explore the Pyramids of Giza and the Great Sphinx on a half-day tour of Cairo with hotel transfers. Enjoy a short camel ride near the pyramids, immersing yourself in the spirit of ancient Egypt."
          Duration:
            type: number
            example: 3
          included:
            type: array
            items:
              type: string
            example: ["Hotel pickup and drop-off", "Transportation by air-conditioned vehicle", "Entry ticket"]
          excluded:
            type: array
            items:
              type: string
            example: ["Entry ticket to go inside any Pyramid", "Lunch expenses","Tips"]
          locations:
            type: array
            items:
              type: string
            example: ["Giza pyramids", "Sphinx"]
          highlight:
            type: array
            items:
              type: string
            example: ["Uncover ancient Egyptian history on a private tour of the Giza Pyramids", "Marvel at the Great Sphinx of Giza, a limestone statue of a reclining sphinx"]
          cloudImages:
            type: array
            items:
              type: string
              format: binary
            example:
              - "https://res.cloudinary.com/.../image1.jpg"
              - "https://res.cloudinary.com/.../image2.jpg"
          localImages:
            type: array
            items:
              type: string
              format: binary
            example:
              - "/uploads/image1.jpg"
              - "/uploads/image2.jpg"
          IsDeleted:
            type: boolean
            default: false
          IsFeatured:
            type: boolean
            default: false
          Governorate:
            type: string
            enum:
              - Cairo
              - Luxor
              - Giza
              - Aswan
              - Alexandria
              - Sharm El Sheikh
              - Hurghada
              - Dahab
              - Sohag
            description: Select one of the predefined governorates
          activityDetails:
                  type: object
                  properties:
                    reserveNowPayLater:
                      type: boolean
                    duration:
                      type: string
                    skipTheTicketLine:
                      type: boolean
                    liveTourGuide:
                      type: boolean
                    pickupIncluded:
                      type: string
          category:
            type: string
            enum:
                - Favorit
                - Special
                - Popular
            description: Select one of the predefined category    
